@page "/PassengerList"
@layout AdminLayout
@using FlightManagementBlazorServer.Services
@inject NavigationManager _navigationManager;
@inject PassengerService _passengerService;
<h3>Passenger List</h3>
<button type="button" @onclick="ShowAddPassengerPage" class="btn btn-success">
<span class="oi oi-plus"></span>
Add Passenger
</button>
@if (Passengers == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table table-responsive">
    <thead>
    <tr>
    <th>Name</th>
    <th>Surname</th>
    <th>Gender</th>
    <th>FlightId</th>
    <th>Checked in</th>
    <th>Seat</th>

    </tr>
    </thead>
    <tbody>
            @foreach (var passenger in Passengers)
            {
        <tr>
        <td>@passenger.Name</td>
        <td>@passenger.Surname</td>
        <td>@passenger.Gender</td>
        <td>@passenger.FlightId</td>
        <td>@passenger.AlreadyCheckedIn</td>
        <td>@passenger.Seat</td>

        <td>
        <button type="button" @onclick="() => OpenEditPassengerPage(passenger.Id)" class="btn btn-primary">
        <span class="oi oi-pencil"></span>
        </button>
        @if(passenger.AlreadyCheckedIn==false)
        {
            <button type="button" @onclick="() => OpenCheckInPassengerPage(passenger.Id)">
            Check in
            </button>
        }
        
        <button type="button" class="btn btn-danger" @onclick="() => DeletePassengerAsync(passenger.Id)">
        <span class="oi oi-delete"></span>
        </button>
        </td>
        </tr>
            }
    </tbody>
    </table>
}
<ConfirmationDialog @ref="DeleteConfirmationDialog" ConfirmationChanged="@OnDeleteConfirmationSelected" Question="Delete passenger?"></ConfirmationDialog>
@code {
    public List<Passenger> Passengers { get; set; }
    public ConfirmationDialog DeleteConfirmationDialog{ get; set; }
    public int SelectedPassengerId{ get; set; }
    protected override async Task OnInitializedAsync()
    {
        Passengers = await GetPassengersAsync();
    }
    private void ShowAddPassengerPage()
    {
        _navigationManager.NavigateTo("/AddPassenger");
    }
    private void OpenEditPassengerPage(int passengerId)
    {
        _navigationManager.NavigateTo($"/EditPassenger/{passengerId}");
    }
    private void OpenCheckInPassengerPage(int passengerId)
    {
        _navigationManager.NavigateTo($"/CheckInPassenger/{passengerId}");
    }
private async Task DeletePassengerAsync(int passengerId)
    {
        SelectedPassengerId = passengerId;
        DeleteConfirmationDialog.Show();
    }
     private async Task OnDeleteConfirmationSelected(bool isDeleteConfirmed)
    {
        if(isDeleteConfirmed)
        {
            await _passengerService.DeletePassengerAsync(SelectedPassengerId);
            Passengers = await _passengerService.GetPassengersAsync();
        }
    }
    private async Task<List<Passenger>> GetPassengersAsync()
    {
        return await _passengerService.GetPassengersAsync();
    }
}
